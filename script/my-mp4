#!/usr/bin/env python3

import argparse
import ffmpeg
import humanize
import os
import shutil
import subprocess

# Get input file name
parser = argparse.ArgumentParser()
parser.add_argument('input', nargs='+', help='input video')
parser.add_argument('-r', '--remove', action="store_true", help='remove input video')
parser.add_argument('-m', '--no-metadata', action="store_true", help='copy metadata')
parser.add_argument('-n', '--dry', action="store_true", help='dry run')
parser.add_argument('-v', '--verbose', action="store_true", help='verbose')
parser.add_argument('--hevc', action="store_true", help='hevc')
parser.add_argument('--crf', type=int, help='CRF')
parser.add_argument('-t', '--time', type=int, help='time')
parser.add_argument('-y', action="store_true", help='overwrite output')
parser.add_argument('-o', '--output', type=str, help='output file name')
args = parser.parse_args()


def get_new_name(old_name):
    new_ext = ".mp4"
    file_name, file_ext = os.path.splitext(old_name)
    if file_ext == new_ext:
        file_name = file_name + '2'
    return file_name + new_ext


def print_size(fa, fb):
    sa = os.path.getsize(fa)
    sb = os.path.getsize(fb)
    fan, fae = os.path.splitext(fa)
    _, fbe = os.path.splitext(fb)
    s = "{:+.1f}%: {} -> {}: {}{{{} -> .mp4}}".format((sb - sa) / sa * 100, humanize.naturalsize(sa),
                                                      humanize.naturalsize(sb), fan, fae, fbe)
    print(s)
    return s


def get_duration(file):
    """Get the duration of a video using ffprobe."""
    cmd = 'ffprobe -i "{}" -show_entries format=duration -v quiet -of csv="p=0"'.format(file)
    try:
        output = subprocess.check_output(
            cmd,
            shell=True,  # Let this run in the shell
            stderr=subprocess.STDOUT)
    except subprocess.CalledProcessError as e:
        print(e.output)
        output = 0
    # return round(float(output))  # ugly, but rounds your seconds up or down
    return float(output)


if len(args.input) == 1:
    _, ext = os.path.splitext(args.input[0])
    if ext == ".txt":
        with open(args.input[0], 'r') as f:
            args.input = f.read().splitlines()

# Transfer
final_report = []
for old_name in args.input:
    file_name, file_ext = os.path.splitext(old_name)
    meta = {}
    if not args.verbose:
        meta.update({'loglevel': 'quiet', 'stats': None})
    if not args.no_metadata:
        meta.update({'map': 0})
    meta.update({'copy_unknown': None, 'map_metadata': 0})
    # hevc setting
    if args.crf != None:
        crf = args.crf
    else:
        crf = 20
    if args.hevc:
        meta.update({'vcodec': 'libx265'})
        meta.update({'tag:v': 'hvc1'})
        meta.update({'crf': crf})
        file_name += ".h265"
    else:
        meta.update({'crf': crf})
        file_name += ".h264"
    if args.time != None:
        meta.update({'t': args.time})
    file_name += ".crf{}".format(crf)
    # file name
    if args.output != None:
        new_name = args.output
    else:
        new_name = file_name + ".mp4"

    # check for skip
    if os.path.isfile(new_name):
        d1 = get_duration(old_name)
        d2 = get_duration(new_name)
        error = abs(d1 - d2) / d1
        if error < 0.01:
            print("{} exist with error={}, skip".format(new_name, error))
            continue
        else:
            print("{} exist with error={}, {}, {}, override".format(new_name, error, d1, d2))

    tmp_name = "my-mp4-tmp.mp4"
    stream = ffmpeg.input(old_name).output(tmp_name, **meta)
    if args.y:
        stream = ffmpeg.overwrite_output(stream)
    assert (old_name != new_name)
    print("ffmpeg {}".format(' '.join(stream.get_args())))
    if not args.dry:
        if os.path.isfile(tmp_name):
            os.remove(tmp_name)
        stream.run()
        shutil.move(tmp_name, new_name)

        # Report
        final_report.append(print_size(old_name, new_name))
        # Clean up
        if args.remove:
            os.remove(old_name)

if len(args.input) > 1:
    print("=== Final Report ===")
    if not args.dry:
        for l in final_report:
            print(l)
