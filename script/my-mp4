#!/usr/bin/env python3

import argparse
from exif import exif
import datetime
import humanize
import os
import shutil
import subprocess
import sys
import tempfile


def print_size(fa, fb):
    sa = os.path.getsize(fa)
    sb = os.path.getsize(fb)
    fan, fae = os.path.splitext(fa)
    _, fbe = os.path.splitext(fb)
    r = (sb - sa) / sa * 100
    sa = humanize.naturalsize(sa)
    sb = humanize.naturalsize(sb)
    s = f"{r:+.1f}%: {sa} -> {sb}"
    return s


def get_duration(file):
    cmd = ['ffprobe', '-i', file, '-show_entries', 'format=duration', '-v', 'quiet', '-of', 'csv=p=0']
    output = subprocess.run(cmd, check=True, capture_output=True, text=True).stdout.strip()
    return float(output)


def get_codec(file):
    cmd = [
        'ffprobe', '-i', file, '-select_streams', 'v:0', '-show_entries', 'stream=codec_name', '-v', 'quiet', '-of',
        'csv=p=0'
    ]
    output = subprocess.run(
        cmd,
        check=True,
        stdout=subprocess.PIPE,
    ).stdout.decode('utf-8').strip()
    return output


def main():
    # Get input file name
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('input', nargs='+', help='input video')
    parser.add_argument('-r', '--remove', action="store_true", help='remove input video')
    parser.add_argument('--threshold', type=int, default=95, help='minimal percentage to remove input video')
    parser.add_argument('-m', '--no-metadata', action="store_true", help='copy metadata')
    parser.add_argument('-n', '--dry', action="store_true", help='dry run')
    parser.add_argument('-v', '--verbose', action="store_true", help='verbose')
    parser.add_argument('--crf', type=int, default=20, help='CRF')
    parser.add_argument('-t', '--time', type=str, help='time')
    args = parser.parse_args()

    # Transfer
    report = []
    total_size_a = 0
    total_size_b = 0
    for old_name in args.input:
        if not os.path.isfile(old_name):
            print(f'error: {old_name} does not exist!')
        assert (os.path.isfile(old_name))
        file_name, _ = os.path.splitext(old_name)
        new_name = f"{file_name}.h265.crf{args.crf}"
        if args.time:
            new_name += f".{args.time}s"
        new_name += ".mp4"
        assert (old_name != new_name)

        cmd = []
        if not args.verbose:
            cmd += ['-loglevel', 'quiet', '-stats']
        if not args.no_metadata:
            cmd += ['-map', '0']
        cmd += ['-copy_unknown', '-map_metadata', '0']
        #meta.update({'preset': 'veryslow'})
        cmd += ['-c:v', 'libx265']
        cmd += ['-tag:v', 'hvc1']
        cmd += ['-crf', f'{args.crf}']
        if args.time != None:
            cmd += ['-t', args.time]

        cmd = ['ffmpeg', '-i', old_name] + cmd
        dirname = os.path.dirname(old_name)
        print(f"==== {old_name} -> {new_name} ==== at {dirname}")
        c = get_codec(old_name)
        total_seconds = get_duration(old_name)
        delta = datetime.timedelta(seconds=total_seconds)
        fsize = humanize.naturalsize(os.path.getsize(old_name))
        print(f"codec = {c}, time = {delta}, size = {fsize}")

        skip = False
        if os.path.isfile(new_name):
            d1 = get_duration(old_name)
            d2 = get_duration(new_name)
            error = abs(d1 - d2) / d1
            if error < 0.03:
                print(f"{new_name} exist with error={error:.2f}, skip")
                skip = True
            else:
                print("{} exist with error=abs({} - {})={}, override".format(new_name, d1, d2, error))

        if not skip:
            if not args.dry:
                tmp_name = tempfile.mktemp(suffix=".mp4")
                if os.path.isfile(tmp_name):
                    os.remove(tmp_name)
                cmd = cmd + [tmp_name]
                print(' '.join(cmd))
                subprocess.run(cmd, check=True, stderr=sys.stderr)
                shutil.copyfile(tmp_name, new_name)
                os.remove(tmp_name)

        # Report
        total_size_a += os.path.getsize(old_name)
        total_size_b += os.path.getsize(new_name)
        s = print_size(old_name, new_name)
        print(s)
        copy_model = exif.copy_model(old_name, new_name)
        report.append(f"{s}: {old_name} -> {new_name}, {copy_model}")
        # Clean up
        if args.remove:
            sa = os.path.getsize(old_name)
            sb = os.path.getsize(new_name)
            do_remove = (1 - sb / sa) > (args.threshold / 100)
            if not args.dry and do_remove:
                os.remove(old_name)
    print("==== Final report ====")
    for r in report:
        print(r)
    r = (total_size_b / total_size_a - 1) * 100
    total_size_a = humanize.naturalsize(total_size_a)
    total_size_b = humanize.naturalsize(total_size_b)
    s = f"{r:+.1f}%: {total_size_a} -> {total_size_b}"
    print(f'{s}: total')


main()
