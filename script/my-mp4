#!/usr/bin/env python3

import argparse
import os
import ffmpeg
import humanize

# Get input file name
parser = argparse.ArgumentParser()
parser.add_argument('input', nargs='+', help='input video')
parser.add_argument('-r', '--remove', action="store_true", help='remove input video')
parser.add_argument('-m', '--no-metadata', action="store_true", help='copy metadata')
parser.add_argument('-n', '--dry', action="store_true", help='dry run')
parser.add_argument('-v', '--verbose', action="store_true", help='verbose')
parser.add_argument('--hevc', action="store_true", help='hevc')
args = parser.parse_args()


def get_new_name(old_name):
    new_ext = ".mp4"
    file_name, file_ext = os.path.splitext(old_name)
    if file_ext == new_ext:
        file_name = file_name + '2'
    return file_name + new_ext


def print_size(fa, fb):
    sa = os.path.getsize(fa)
    sb = os.path.getsize(fb)
    fan, fae = os.path.splitext(fa)
    _, fbe = os.path.splitext(fb)
    s = "{:+.1f}%: {} -> {}: {}{{{} -> .mp4}}".format((sb - sa) / sa * 100, humanize.naturalsize(sa),
                                                      humanize.naturalsize(sb), fan, fae, fbe)
    print(s)
    return s


# Transfer
final_report = []
for old_name in args.input:
    file_name, file_ext = os.path.splitext(old_name)
    meta = {}
    if not args.verbose:
        meta.update({'loglevel': 'quiet', 'stats': None})
    if not args.no_metadata:
        meta.update({'map': 0, 'copy_unknown': None, 'map_metadata': 0})
    # hevc setting
    if args.hevc:
        meta.update({'vcodec': 'libx265'})
        meta.update({'tag:v': 'hvc1'})
        meta.update({'crf': '20'})
        file_name += ".h265"
    else:
        meta.update({'crf': '18'})
        file_name += ".h264"
    # file name
    new_name = file_name + ".mp4"
    stream = ffmpeg.input(old_name).output(new_name, **meta)
    assert (old_name != new_name)
    print("ffmpeg {}".format(' '.join(stream.get_args())))
    if not args.dry:
        stream.run()

        # Report
        final_report.append(print_size(old_name, new_name))
        # Clean up
        if args.remove:
            os.remove(old_name)

if len(args.input) > 1:
    print("=== Final Report ===")
    if not args.dry:
        for l in final_report:
            print(l)
