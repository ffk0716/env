#!/usr/bin/env python3

import exiftool
import os
import argparse
import re
import datetime as dt

# Get input file name
parser = argparse.ArgumentParser("my exif")
parser.add_argument('input', nargs='+', help='input photo')
parser.add_argument('-a', '--append', action="store_true", help='append original name')
parser.add_argument('-n', '--dry', action="store_true", help='dry run')
parser.add_argument('-v', '--verbose', action="store_true", help='verbose')
parser.add_argument('-m', action="store_true", help='use modification time instead exif DateTimeOriginal')
parser.add_argument('-c', action="store_true", help='use create time instead exif DateTimeOriginal')
args = parser.parse_args()

for old_name in args.input:
    if args.m:
        a = os.path.getmtime(old_name)
        date_time = dt.datetime.fromtimestamp(a)
        time = date_time.strftime("%Y-%m-%d %H.%M.%S")
    elif args.c:
        a = os.path.getctime(old_name)
        date_time = dt.datetime.fromtimestamp(a)
        time = date_time.strftime("%Y-%m-%d %H.%M.%S")
    else:  # use exif
        with exiftool.ExifTool() as et:
            for l in ["MediaCreateDate", "EXIF:DateTimeOriginal"]:
                time_string = et.get_tag(l, old_name)
                if time_string == None:
                    continue
                t = dt.datetime.strptime(time_string, '%Y:%m:%d %H:%M:%S')
                t += dt.timedelta(hours=8)
                time = t.strftime('%Y-%m-%d %H.%M.%S')
                break
            else:
                print(f"{old_name}: skip, no exif")
                continue
    filename, ext = os.path.splitext(old_name)
    ext = ext.lower()
    new_name = time
    if args.append:
        new_name = "{} {}".format(new_name, filename)
    if old_name == new_name + ext:
        continue

    new_name_try = new_name
    file_count = 1
    while os.path.isfile(new_name_try + ext):
        new_name_try = "{}-{}".format(new_name, file_count)
        file_count += 1
    new_name = new_name_try
    new_name = new_name + ext

    print('{} -> {}'.format(old_name, new_name))
    if not args.dry:
        os.rename(old_name, new_name)
